!function(){"use strict";var e=[,function(e,t,s){s.r(t),s.d(t,{clearTokens:function(){return c},fetchAccessToken:function(){return a},getAccessToken:function(){return n},getRefreshToken:function(){return r},isTokenExpired:function(){return u},refreshAccessToken:function(){return i},setTokens:function(){return o}});const o=(e,t)=>{sessionStorage.setItem("accessToken",e),sessionStorage.setItem("refreshToken",t)},n=()=>sessionStorage.getItem("accessToken"),r=()=>sessionStorage.getItem("refreshToken"),c=()=>{sessionStorage.removeItem("accessToken"),sessionStorage.removeItem("refreshToken")},a=async()=>{let e;try{e=await fetch("/chat/api/access_token",{method:"POST",headers:{"Content-Type":"application/json"}});const t=await e.json();if(!e.ok)throw new Error(t?.error?t.error:"トークンのリフレッシュに失敗しました。");return{success:!0,accessToken:t.access_token,refreshToken:t.refresh_token,status:e.status}}catch(t){return console.error("アクセストークンの取得中にエラーが発生しました:",t),{success:!1,message:t,status:e.status}}},i=async e=>{let t;try{if(!e)throw new Error("リフレッシュトークンが見つかりません。");t=await fetch("/chat/api/refresh_token",{method:"POST",headers:{Authorization:"Bearer "+e,"Content-Type":"application/json"}});const s=await t.json();if(!t.ok)throw new Error(s?.error?s.error:"トークンのリフレッシュに失敗しました。");return{success:!0,token:s.access_token,status:t.status}}catch(e){return console.error("トークンのリフレッシュ中にエラーが発生しました:",e),{success:!1,message:e,status:t.status}}},u=e=>{const t=(e=>{try{return JSON.parse(atob(e.split(".")[1]))}catch(e){return console.error("トークンのデコード中にエラーが発生しました:",e),null}})(e);if(!t||!t.exp)return!0;const s=Math.floor(Date.now()/1e3);return t.exp<s}}],t={};function s(o){var n=t[o];if(void 0!==n)return n.exports;var r=t[o]={exports:{}};return e[o](r,r.exports,s),r.exports}s.d=function(e,t){for(var o in t)s.o(t,o)&&!s.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};!function(){s.r(o);var e=s(1);window.chatApp=function(){return{websocket:null,messageInput:"",messages:[],init(){this.checkAndRefreshToken(),setInterval((()=>{this.checkAndRefreshToken()}),6e5)},async checkAndRefreshToken(){let t=window.chatTokens.accessToken,s=window.chatTokens.refreshToken;if((0,e.isTokenExpired)(t)){const o=await(0,e.refreshAccessToken)(s);if(!o.success)return void alert(o.message);t=o.token}this.websocket||this.initWebSocketConnection(t)},async initWebSocketConnection(e){const t=`ws://localhost:8080?token=${encodeURIComponent(e)}`;this.websocket=new WebSocket(t),this.websocket.onopen=()=>{this.websocket.send(JSON.stringify({command:"subscribe"})),console.log("WebSocket接続が確立されました。")},this.websocket.onmessage=e=>{const t=JSON.parse(e.data);this.messages.push({message:t.message,created_at:new Date(t.created_at).toLocaleTimeString("ja-JP",{timeZone:"Asia/Tokyo",hour:"2-digit",minute:"2-digit"}),user_name:t.user_name,user_flag:t.user_flag,is_bot:t.is_bot}),this.$nextTick((()=>{document.querySelector(".chat-room").scrollTop=document.getElementById("message-box").scrollHeight}))},this.websocket.onerror=e=>{console.error("WebSocketエラーが発生しました：",e)},this.websocket.onclose=e=>{console.log("WebSocket接続が閉じられました。")}},sendMessage(){if(""===this.messageInput)return void alert("メッセージを入力してください。");if(this.messageInput.length>1e3)return void alert("メッセージは1000文字以内で入力してください。");let e={message:this.messageInput,command:"message"};this.websocket.send(JSON.stringify(e)),this.messageInput=""}}}}()}();